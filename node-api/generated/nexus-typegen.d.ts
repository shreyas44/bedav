/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */

import * as Prisma from "@prisma/client"
import { Context as Context } from "./../src/api/sourceTypes"
import { core, connectionPluginCore } from "nexus"

declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    /**
     * Adds a Relay-style connection to the type, with numerous options for configuration
     *
     * @see https://nexusjs.org/docs/plugins/connection
     */
    connectionField<FieldName extends string>(
      fieldName: FieldName,
      config: connectionPluginCore.ConnectionFieldConfig<TypeName, FieldName>
    ): void
  }
}


declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
  BedCategory: "general" | "hdu" | "icu" | "oxygen" | "ventilator"
  StateAbbreviation: "AN" | "AP" | "AR" | "AS" | "BR" | "CG" | "CH" | "DD" | "DL" | "DN" | "GA" | "GJ" | "HP" | "HR" | "JH" | "JK" | "KA" | "KL" | "LA" | "LD" | "MH" | "ML" | "MN" | "MP" | "MZ" | "NL" | "OR" | "PB" | "PY" | "RJ" | "SK" | "TN" | "TR" | "TS" | "UK" | "UP" | "WB"
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenObjects {
  Availability: { // root type
    available?: number | null; // Int
    occupied?: number | null; // Int
    total?: number | null; // Int
  }
  Country: {};
  Hospital: Prisma.Hospital;
  HospitalConnection: { // root type
    edges?: Array<NexusGenRootTypes['HospitalEdge'] | null> | null; // [HospitalEdge]
    pageInfo: NexusGenRootTypes['PageInfo']; // PageInfo!
  }
  HospitalEdge: { // root type
    cursor: string; // String!
    node?: NexusGenRootTypes['Hospital'] | null; // Hospital
  }
  Location: Prisma.Location;
  LocationConnection: { // root type
    edges?: Array<NexusGenRootTypes['LocationEdge'] | null> | null; // [LocationEdge]
    pageInfo: NexusGenRootTypes['PageInfo']; // PageInfo!
  }
  LocationEdge: { // root type
    cursor: string; // String!
    node?: NexusGenRootTypes['Location'] | null; // Location
  }
  PageInfo: { // root type
    endCursor?: string | null; // String
    hasNextPage: boolean; // Boolean!
    hasPreviousPage: boolean; // Boolean!
    startCursor?: string | null; // String
  }
  Query: {};
  State: Prisma.State;
  StateConnection: { // root type
    edges?: Array<NexusGenRootTypes['StateEdge'] | null> | null; // [StateEdge]
    pageInfo: NexusGenRootTypes['PageInfo']; // PageInfo!
  }
  StateEdge: { // root type
    cursor: string; // String!
    node?: NexusGenRootTypes['State'] | null; // State
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars & NexusGenEnums

export interface NexusGenFieldTypes {
  Availability: { // field return type
    available: number | null; // Int
    occupied: number | null; // Int
    total: number | null; // Int
  }
  Country: { // field return type
    availability: NexusGenRootTypes['Availability'] | null; // Availability
    locations: NexusGenRootTypes['LocationConnection'] | null; // LocationConnection
    states: NexusGenRootTypes['StateConnection'] | null; // StateConnection
  }
  Hospital: { // field return type
    address: string | null; // String
    email: string | null; // String
    general: NexusGenRootTypes['Availability'] | null; // Availability
    hdu: NexusGenRootTypes['Availability'] | null; // Availability
    icu: NexusGenRootTypes['Availability'] | null; // Availability
    id: string; // ID!
    latitude: number | null; // Float
    location: NexusGenRootTypes['Location'] | null; // Location
    longitude: number | null; // Float
    name: string; // String!
    oxygen: NexusGenRootTypes['Availability'] | null; // Availability
    phone: string | null; // String
    ventilator: NexusGenRootTypes['Availability'] | null; // Availability
    website: string | null; // String
  }
  HospitalConnection: { // field return type
    edges: Array<NexusGenRootTypes['HospitalEdge'] | null> | null; // [HospitalEdge]
    pageInfo: NexusGenRootTypes['PageInfo']; // PageInfo!
  }
  HospitalEdge: { // field return type
    cursor: string; // String!
    node: NexusGenRootTypes['Hospital'] | null; // Hospital
  }
  Location: { // field return type
    availability: NexusGenRootTypes['Availability'] | null; // Availability
    hospitals: NexusGenRootTypes['HospitalConnection'] | null; // HospitalConnection
    id: string; // ID!
    name: string; // String!
    state: NexusGenRootTypes['State']; // State!
  }
  LocationConnection: { // field return type
    edges: Array<NexusGenRootTypes['LocationEdge'] | null> | null; // [LocationEdge]
    pageInfo: NexusGenRootTypes['PageInfo']; // PageInfo!
  }
  LocationEdge: { // field return type
    cursor: string; // String!
    node: NexusGenRootTypes['Location'] | null; // Location
  }
  PageInfo: { // field return type
    endCursor: string | null; // String
    hasNextPage: boolean; // Boolean!
    hasPreviousPage: boolean; // Boolean!
    startCursor: string | null; // String
  }
  Query: { // field return type
    country: NexusGenRootTypes['Country'] | null; // Country
    location: NexusGenRootTypes['Location'] | null; // Location
    state: NexusGenRootTypes['State'] | null; // State
  }
  State: { // field return type
    availability: NexusGenRootTypes['Availability'] | null; // Availability
    id: string; // ID!
    locations: NexusGenRootTypes['LocationConnection'] | null; // LocationConnection
    name: string; // String!
  }
  StateConnection: { // field return type
    edges: Array<NexusGenRootTypes['StateEdge'] | null> | null; // [StateEdge]
    pageInfo: NexusGenRootTypes['PageInfo']; // PageInfo!
  }
  StateEdge: { // field return type
    cursor: string; // String!
    node: NexusGenRootTypes['State'] | null; // State
  }
}

export interface NexusGenFieldTypeNames {
  Availability: { // field return type name
    available: 'Int'
    occupied: 'Int'
    total: 'Int'
  }
  Country: { // field return type name
    availability: 'Availability'
    locations: 'LocationConnection'
    states: 'StateConnection'
  }
  Hospital: { // field return type name
    address: 'String'
    email: 'String'
    general: 'Availability'
    hdu: 'Availability'
    icu: 'Availability'
    id: 'ID'
    latitude: 'Float'
    location: 'Location'
    longitude: 'Float'
    name: 'String'
    oxygen: 'Availability'
    phone: 'String'
    ventilator: 'Availability'
    website: 'String'
  }
  HospitalConnection: { // field return type name
    edges: 'HospitalEdge'
    pageInfo: 'PageInfo'
  }
  HospitalEdge: { // field return type name
    cursor: 'String'
    node: 'Hospital'
  }
  Location: { // field return type name
    availability: 'Availability'
    hospitals: 'HospitalConnection'
    id: 'ID'
    name: 'String'
    state: 'State'
  }
  LocationConnection: { // field return type name
    edges: 'LocationEdge'
    pageInfo: 'PageInfo'
  }
  LocationEdge: { // field return type name
    cursor: 'String'
    node: 'Location'
  }
  PageInfo: { // field return type name
    endCursor: 'String'
    hasNextPage: 'Boolean'
    hasPreviousPage: 'Boolean'
    startCursor: 'String'
  }
  Query: { // field return type name
    country: 'Country'
    location: 'Location'
    state: 'State'
  }
  State: { // field return type name
    availability: 'Availability'
    id: 'ID'
    locations: 'LocationConnection'
    name: 'String'
  }
  StateConnection: { // field return type name
    edges: 'StateEdge'
    pageInfo: 'PageInfo'
  }
  StateEdge: { // field return type name
    cursor: 'String'
    node: 'State'
  }
}

export interface NexusGenArgTypes {
  Country: {
    locations: { // args
      after?: string | null; // String
      before?: string | null; // String
      first?: number | null; // Int
      last?: number | null; // Int
    }
    states: { // args
      after?: string | null; // String
      before?: string | null; // String
      first?: number | null; // Int
      last?: number | null; // Int
    }
  }
  Location: {
    hospitals: { // args
      after?: string | null; // String
      before?: string | null; // String
      first?: number | null; // Int
      last?: number | null; // Int
    }
  }
  Query: {
    location: { // args
      name: string; // String!
      state: NexusGenEnums['StateAbbreviation']; // StateAbbreviation!
    }
    state: { // args
      id: NexusGenEnums['StateAbbreviation']; // StateAbbreviation!
    }
  }
  State: {
    locations: { // args
      after?: string | null; // String
      before?: string | null; // String
      first?: number | null; // Int
      last?: number | null; // Int
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = keyof NexusGenEnums;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
    
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}